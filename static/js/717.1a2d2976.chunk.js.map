{"version":3,"file":"static/js/717.1a2d2976.chunk.js","mappings":"sJA2BA,IAiBIA,EAAS,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAOL,GC3DIQ,EAAa,CACtB,CAAEC,QAAS,+BAAgCC,KAAM,sNACjD,CAAED,QAAS,0DAA2DC,KAAM,sNAC5E,CAAED,QAAS,0BAA2BC,KAAM,0DCHnCC,EAAY,CACrB,CAAEF,QAAS,SAAUC,KAAM,mBAC3B,CAAED,QAAS,OAAQC,KAAM,4BACzB,CAAED,QAAS,kBAAmBC,KAAM,4CACpC,CAAED,QAAS,UAAWC,KAAM,6BCHhC,EAAkG,0BAAlG,EAAsI,4BAAtI,EAA8K,8BAA9K,EAAwN,8BAAxN,EAAgQ,4BAAhQ,EAAsS,4BAAtS,EAA4U,4B,UCoC5U,EA9BmB,WACjB,IAAME,EAAiBJ,EAAWK,KAAI,SAAAC,GACpC,OACE,eAAIC,UAAWC,EAAf,UACE,cAAGC,KAAMH,EAAKJ,KAAd,SAAqBI,EAAKL,WADQX,QAKlCoB,EAAgBP,EAAUE,KAAI,SAAAC,GAClC,OACE,eAAIC,UAAWC,EAAf,UACE,cAAGC,KAAMH,EAAKJ,KAAd,SAAqBI,EAAKL,WADQX,QAMxC,OACE,iBAAMiB,UAAWC,EAAjB,UACE,oBAASD,UAAU,YAAnB,UACE,iBAAKA,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,gCACA,eAAID,UAAWC,EAAf,SAAgCJ,KAChC,eAAIG,UAAWC,EAAf,+BACA,eAAID,UAAWC,EAAf,SAAgCE,YCxB1C,EAJuB,WACrB,OAAO,SAAC,EAAD","sources":["../node_modules/nanoid/index.prod.js","modules/UsefulInfo/info-content/literature.js","modules/UsefulInfo/info-content/resources.js","webpack://pro-test/./src/modules/UsefulInfo/usefulInfo.module.scss?4bac","modules/UsefulInfo/UsefulInfo.jsx","pages/UsefulInfoPage/UsefulInfoPage.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nif (false) {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const literature = [\n    { content: 'Testing dot.com. Roman Savin', link: 'https://books.google.com.ua/books/about/%D0%A2%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%94%D0%BE%D1%82_%D0%9A%D0%BE%D0%BC.html?id=8sisvAEACAAJ&source=kp_book_description&redir_esc=y'},\n    { content: 'A mental hospital in the hands of patients. Alan Cooper', link: 'https://books.google.com.ua/books/about/%D0%9F%D1%81%D0%B8%D1%85%D0%B1%D0%BE%D0%BB%D1%8C%D0%BD%D0%B8%D1%86%D0%B0_%D0%B2_%D1%80%D1%83%D0%BA%D0%B0%D1%85.html?id=YkdskgAACAAJ&source=kp_book_description&redir_esc=y'},\n    { content: 'Scrum. James Sutherland', link: 'https://www.goodreads.com/da/book/show/33130465-scrum' },   \n]\n\n\n","export const resources = [\n    { content: 'dou.ua', link: 'https://dou.ua/'},\n    { content: 'Habr', link: 'https://habr.com/en/all/'},\n    { content: 'facebook.com/QA', link: 'https://www.facebook.com/search/top?q=qa'},\n    { content: 'goit.ua', link: 'https://goit.ua/?lang=uk'},\n    \n]\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"usefulInfo_root__Frnf2\",\"container\":\"usefulInfo_container__B4WS3\",\"title\":\"usefulInfo_title__8g2yP\",\"resItem\":\"usefulInfo_resItem__8hKAr\",\"mainBlock\":\"usefulInfo_mainBlock__43MUM\",\"infoBlock\":\"usefulInfo_infoBlock__6J4FM\",\"litList\":\"usefulInfo_litList__NoyAj\",\"litItem\":\"usefulInfo_litItem__agYmB\",\"resList\":\"usefulInfo_resList__rV+kR\"};","import { nanoid } from 'nanoid';\n\nimport { literature } from './info-content/literature';\nimport { resources } from './info-content/resources';\n\nimport styles from './usefulInfo.module.scss';\n\nconst UsefulInfo = () => {\n  const literatureList = literature.map(item => {\n    return (\n      <li className={styles.litItem} key={nanoid()}>\n        <a href={item.link}>{item.content}</a>\n      </li>\n    );\n  });\n  const resourcesList = resources.map(item => {\n    return (\n      <li className={styles.resItem} key={nanoid()}>\n        <a href={item.link}>{item.content}</a>\n      </li>\n    );\n  });\n\n  return (\n    <main className={styles.mainBlock}>\n      <section className=\"container\">\n        <div className={styles.infoBlock}>\n          <h2 className={styles.title}>Useful literature</h2>\n          <ol className={styles.litList}>{literatureList}</ol>\n          <h2 className={styles.title}>Useful resources</h2>\n          <ol className={styles.resList}>{resourcesList}</ol>\n        </div>\n      </section>\n    </main>\n  );\n};\n\nexport default UsefulInfo;\n","import UsefulInfo from '../../modules/UsefulInfo/UsefulInfo';\n\nconst UsefulInfoPage = () => {\n  return <UsefulInfo />;\n};\n\nexport default UsefulInfoPage;"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","literature","content","link","resources","literatureList","map","item","className","styles","href","resourcesList"],"sourceRoot":""}