{"version":3,"file":"static/js/113.13bcf4ce.chunk.js","mappings":"sJACA,MAAmG,8BAAnG,EAAgJ,8BAAhJ,EAA4L,6BAA5L,EAAkQ,yBAAlQ,EAA4S,gCAA5S,EAAmV,sBAAnV,EAAkX,wBAAlX,EAAoZ,yB,0FC8GpZ,EAnGgB,WACd,IAAMA,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,GAAaC,EAAAA,IACpCC,GAASH,EAAAA,EAAAA,IAAYI,EAAAA,GAAeF,EAAAA,IACpCG,EAAiBC,KAAKC,MACQ,GAAjCJ,EAAOA,OAAOK,QAAQ,IAAK,IAAY,KAIpCC,EAAO,CACX,CAAEC,KAAM,eAAgBC,MAHL,GAAKN,GAIxB,CAAEK,KAAM,cAAeC,MAAON,IAG1BO,EAAS,CAAC,UAAW,WAErBC,EAASP,KAAKQ,GAAK,IACnBC,EAAwB,SAAC,GAQxB,IAPLC,EAOI,EAPJA,GACAC,EAMI,EANJA,GACAC,EAKI,EALJA,SACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,QAGMC,GADF,EADJC,MAEeJ,EAA4C,IAA7BC,EAAcD,IACtCK,EAAIR,EAAKM,EAAShB,KAAKmB,KAAKP,EAAWL,GACvCa,EAAIT,EAAKK,EAAShB,KAAKqB,KAAKT,EAAWL,GAE7C,OACE,iBACEW,EAAGA,EACHE,EAAGA,EACHE,KAAK,QACLC,WAAW,MACXC,SAAS,OACTC,WAAYP,EAAIR,EAAK,QAAU,MAC/BgB,iBAAiB,UAPnB,oBASiB,IAAVX,GAAeY,QAAQ,GAT9B,QAuCJ,OACE,gBAAKC,UAAU,YAAf,UACE,iBAAKA,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,sBACA,cAAGD,UAAWC,EAAd,6BAAiDpC,EAAjD,SA5BF,+BACE,SAACqC,EAAA,EAAD,CAAUC,MAAO,IAAKC,OAAQ,IAA9B,UACE,SAACC,EAAA,EAAD,CACE9B,KAAMA,EACNO,GAAI,IACJC,GAAI,IACJuB,WAAW,EACXC,MAAO1B,EACPK,YAAa,IACbQ,KAAK,UACLc,QAAQ,QARV,SAUGjC,EAAKkC,KAAI,SAACC,EAAOrB,GAAR,OACR,SAACsB,EAAA,EAAD,CAEEjB,KAAMhB,EAAOW,EAAQX,EAAOkC,SAF9B,eACevB,cAgBrB,iBAAKW,UAAWC,EAAhB,WACE,eAAGD,UAAWC,EAAd,+BACqB9B,EAAgB,QAErC,oDAEF,qBAAS6B,UAAWC,EAApB,WACE,mBACEY,MAAM,qBACNC,IAAI,iDAEN,mBAAQD,MAAM,qBAAqBC,IAAKC,KACxC,gBAAKD,IAAKE,EAAOC,IAAI,uCAEvB,wBAAKhD,EAAOiD,eACZ,cAAGlB,UAAWC,EAAd,SAA4BhC,EAAOkD,oBACnC,SAAC,KAAD,CAAMnB,UAAWC,EAAoBmB,GAAG,QAAxC,6BCjGR,EAJoB,WAClB,OAAO,SAAC,EAAD,M,8ECHF,IAEMrD,EAAc,SAAAsD,GAAK,OAAIA,EAAMxD,SAASA,UACtCK,EAAgB,SAAAmD,GAAK,OAAIA,EAAMC,QAAQC,a","sources":["webpack://pro-test/./src/modules/Results/results.module.scss?3276","modules/Results/Results.jsx","pages/ResultsPage/ResultsPage.jsx","redux/qaTests/qaTests-selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"results_root__8SXXp\",\"container\":\"results_container__IMbUv\",\"header__text\":\"results_header__text__Qoa0E\",\"text_answers\":\"results_text_answers__vqtGy\",\"tryAgainBtn\":\"results_tryAgainBtn__S3-En\",\"image\":\"results_image__3hdkX\",\"answers\":\"results_answers__9Gour\",\"wrapper_answer\":\"results_wrapper_answer__wcQde\",\"text\":\"results_text__cSAzk\",\"header\":\"results_header__Ldf8a\",\"picture\":\"results_picture__WDAmb\"};","import styles from './results.module.scss';\n\nimport { PieChart, Pie, Cell } from 'recharts';\nimport catPc from '../../images/results/catPcx.png';\nimport catPc2x from '../../images/results/catPcx2.png';\nimport { Link } from 'react-router-dom';\nimport {\n  getTestType,\n  getTestResult,\n} from '../../redux/qaTests/qaTests-selectors';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst Results = () => {\n  const testType = useSelector(getTestType, shallowEqual);\n  const result = useSelector(getTestResult, shallowEqual);\n  const correctAnswers = Math.round(\n    (result.result.replace('%', '') * 12) / 100\n  );\n  const falseAnswers = 12 - correctAnswers;\n\n  const data = [\n    { name: 'false answer', value: falseAnswers },\n    { name: 'true answer', value: correctAnswers },\n  ];\n\n  const COLORS = ['#D7D7D7', '#FF6B09'];\n\n  const RADIAN = Math.PI / 180;\n  const renderCustomizedLabel = ({\n    cx,\n    cy,\n    midAngle,\n    innerRadius,\n    outerRadius,\n    percent,\n    index,\n  }) => {\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n    return (\n      <text\n        x={x}\n        y={y}\n        fill=\"white\"\n        fontWeight=\"500\"\n        fontSize=\"18px\"\n        textAnchor={x > cx ? 'start' : 'end'}\n        dominantBaseline=\"central\"\n      >\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    );\n  };\n  const Crujok = () => {\n    return (\n      <>\n        <PieChart width={310} height={300}>\n          <Pie\n            data={data}\n            cx={150}\n            cy={150}\n            labelLine={false}\n            label={renderCustomizedLabel}\n            outerRadius={120}\n            fill=\"#8884d8\"\n            dataKey=\"value\"\n          >\n            {data.map((entry, index) => (\n              <Cell\n                key={`cell-${index}`}\n                fill={COLORS[index % COLORS.length]}\n              />\n            ))}\n          </Pie>\n        </PieChart>\n      </>\n    );\n  };\n\n  return (\n    <div className=\"container\">\n      <div className={styles.wrapper_answer}>\n        <h1 className={styles.header}>Results</h1>\n        <p className={styles.header__text}>{`[ Testing ${testType}_]`}</p>\n        {Crujok()}\n        <div className={styles.answers}>\n          <p className={styles.text_answers}>\n            Correct answers - {correctAnswers}{' '}\n          </p>\n          <p>Total questions - 12</p>\n        </div>\n        <picture className={styles.picture}>\n          <source\n            media=\"(max-width: 719px)\"\n            src=\"./CatMobilex2.png  1x, ./CatMobilex2.png 2x\"\n          />\n          <source media=\"(min-width: 720px)\" src={catPc2x} />\n          <img src={catPc} alt=\"котек\" />\n        </picture>\n        <h2>{result.mainMessage}</h2>\n        <p className={styles.text}>{result.secondaryMessage}</p>\n        <Link className={styles.tryAgainBtn} to=\"/test\">\n          Try again\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Results;\n","import Results from '../../modules/Results';\n\nconst ResultsPage = () => {\n  return <Results />;\n};\n\nexport default ResultsPage;\n","export const getGlobalState = state => state;\nexport const getTestsArr = state => state.qaTests.questionsArr;\nexport const getTestType = state => state.testType.testType;\nexport const getTestResult = state => state.qaTests.testResult;\n"],"names":["testType","useSelector","getTestType","shallowEqual","result","getTestResult","correctAnswers","Math","round","replace","data","name","value","COLORS","RADIAN","PI","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","index","x","cos","y","sin","fill","fontWeight","fontSize","textAnchor","dominantBaseline","toFixed","className","styles","PieChart","width","height","Pie","labelLine","label","dataKey","map","entry","Cell","length","media","src","catPc2x","catPc","alt","mainMessage","secondaryMessage","to","state","qaTests","testResult"],"sourceRoot":""}